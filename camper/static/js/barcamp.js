// Generated by CoffeeScript 1.8.0
$.fn.gallery = function(opts) {
  var $container, $gallery, $galleryPicture, $galleryPictures, blurMultiplier, currentImage, distLog, distLogLimit, distThreshold, dragPos, dragging, galleryPos, imageSpacing, imageTotalWidth, imageWidth, init, lastBlur, lastDragPos, lastPos, maxBlur, minBlur, momentumTween, setBlur, setGalleryPos, speedLog, speedLogLimit, stopMomentum, totalDist, updateGalleryPos, updateGalleryPosLoop;
  if (opts == null) {
    opts = {};
  }
  $container = null;
  $gallery = null;
  $galleryPictures = null;
  $galleryPicture = null;
  lastPos = {
    x: 0
  };
  galleryPos = {
    x: 0
  };
  currentImage = -1;
  imageWidth = 700;
  imageSpacing = 120;
  imageTotalWidth = 0;
  speedLog = [];
  speedLogLimit = 5;
  minBlur = 100;
  maxBlur = 700;
  blurMultiplier = 1.25;
  lastBlur = 0;
  dragging = false;
  lastDragPos = {
    x: 0
  };
  dragPos = {
    x: 0
  };
  totalDist = 0;
  distThreshold = 10;
  distLog = [];
  distLogLimit = 10;
  momentumTween = null;
  init = function() {
    $container = $(this);
    $gallery = $container.find(".gallery");
    $galleryPictures = $container.find(".gallery-pictures");
    $galleryPicture = $container.find(".gallery-picture");
    imageTotalWidth = imageWidth + imageSpacing;
    $galleryPictures.css({
      webkitFilter: "url('#blur')",
      filter: "url('#blur')"
    });
    $galleryPicture.each(function(i) {
      var cur;
      cur = $(this);
      cur.click(function() {
        if (Math.abs(totalDist) < distThreshold) {
          return setGalleryPos(i);
        }
      });
      return $container.find(".gallery-pagination-dot").eq(i).click(function() {
        return setGalleryPos(i);
      });
    });
    $gallery.mousedown(function(event) {
      event.preventDefault();
      dragging = true;
      dragPos.x = event.pageX;
      lastDragPos.x = dragPos.x;
      totalDist = 0;
      distLog = [];
      stopMomentum();
      return updateGalleryPosLoop();
    });
    $(document).mousemove(function(event) {
      if (dragging) {
        return dragPos.x = event.pageX;
      }
    });
    $(document).mouseup(function(event) {
      var excess, releaseSpeed, s, targetImage, targetX, _i, _len;
      if (dragging) {
        dragging = false;
        releaseSpeed = 0;
        for (_i = 0, _len = distLog.length; _i < _len; _i++) {
          s = distLog[_i];
          releaseSpeed += s;
        }
        releaseSpeed /= distLog.length;
        targetX = galleryPos.x + (releaseSpeed * 20);
        targetX = Math.round(targetX / imageTotalWidth) * imageTotalWidth;
        targetImage = -targetX / imageTotalWidth;
        excess = 0;
        if (targetImage < 0) {
          excess = targetImage;
          targetImage = 0;
        } else if (targetImage >= $galleryPicture.length) {
          excess = targetImage - ($galleryPicture.length - 1);
          targetImage = $galleryPicture.length - 1;
        }
        if (excess !== 0) {
          targetX = -targetImage * imageTotalWidth;
        }
        momentumTween = TweenMax.to(galleryPos, 1 - (Math.abs(excess) / 20), {
          x: targetX,
          ease: Quint.easeOut,
          onUpdate: updateGalleryPos,
          onComplete: updateGalleryPos
        });
        if (Math.abs(totalDist) >= distThreshold) {
          event.preventDefault();
          return event.stopPropagation();
        }
      }
    });
    return setGalleryPos(0, false);
  };
  setBlur = function(v) {
    if (v < minBlur) {
      v = 0;
    }
    if (v > maxBlur) {
      v = maxBlur;
    }
    if (v !== lastBlur) {
      $("#blur").get(0).firstElementChild.setAttribute("stdDeviation", v + ",0");
    }
    return lastBlur = v;
  };
  setGalleryPos = function(v, anim) {
    if (typeof anim === "undefined") {
      anim = true;
    }
    stopMomentum();
    return TweenMax.to(galleryPos, anim != null ? anim : {
      0.8: 0
    }, {
      x: -v * imageTotalWidth,
      ease: Quint.easeOut,
      onUpdate: updateGalleryPos,
      onComplete: updateGalleryPos
    });
  };
  updateGalleryPos = function() {
    var blur, speed, _currentImage;
    TweenMax.set($galleryPictures, {
      x: galleryPos.x + (($container.width() - imageWidth) / 2),
      force3D: true,
      lazy: true
    });
    speed = lastPos.x - galleryPos.x;
    blur = Math.abs(Math.round(speed * blurMultiplier));
    setBlur(blur);
    lastPos.x = galleryPos.x;
    _currentImage = Math.round(-galleryPos.x / imageTotalWidth);
    if (_currentImage !== currentImage) {
      currentImage = _currentImage;
      $container.find(".gallery-pagination-dot-selected").removeClass('gallery-pagination-dot-selected');
      return $container.find(".gallery-pagination-dot").eq(currentImage).addClass('gallery-pagination-dot-selected');
    }
  };
  updateGalleryPosLoop = function() {
    var dist;
    if (dragging) {
      updateGalleryPos();
      dist = dragPos.x - lastDragPos.x;
      lastDragPos.x = dragPos.x;
      totalDist += dist;
      distLog.push(dist);
      while (distLog.length > distLogLimit) {
        distLog.splice(0, 1);
      }
      galleryPos.x += dist;
      return requestAnimationFrame(updateGalleryPosLoop);
    }
  };
  stopMomentum = function() {
    if (momentumTween !== null) {
      momentumTween.kill();
      momentumTween = null;
      return updateGalleryPos();
    }
  };
  $(this).each(init);
  return this;
};

$(function() {
  var event_layer, event_map, layer, map;
  $(".gallerycontainer").gallery();
  $(".upload-widget").uploader();
  $('[data-toggle=confirmation]').confirmation({
    popout: true
  });
  $('[data-toggle="editfield"]').click(function() {
    var f, p;
    $(this).hide();
    p = $(this).closest(".editfield");
    return f = $(p).find(".edit").show();
  });
  $('[data-close="editfield"]').on("click", function() {
    var f, p;
    $(this).closest(".edit").hide();
    p = $(this).closest(".editfield");
    f = $(p).find(".value").show();
    return false;
  });
  $('form.edit').on("submit", function() {
    var f, p;
    $(this).closest(".edit").hide();
    p = $(this).closest(".editfield");
    f = $(p).find(".value").show();
    alert("Gespeichert");
    return false;
  });
  $(".asset-delete").click(function() {
    var confirm_message, idx, url;
    confirm_message = $(this).data("confirm");
    url = $(this).data("url");
    idx = $(this).data("idx");
    if (confirm(confirm_message)) {
      return $.ajax({
        url: url,
        type: "POST",
        data: {
          method: "delete",
          idx: idx
        },
        success: function() {
          return window.location.reload();
        }
      });
    } else {

    }
  });
  $("#blog-add-button").click(function() {
    $("#blog-add-button-container").slideUp();
    return $("#blog-add-form").slideDown();
  });
  $("#blog-add-cancel-button").click(function() {
    $("#blog-add-form")[0].reset();
    $("#blog-add-button-container").slideDown();
    $("#blog-add-form").slideUp();
    return false;
  });
  $(".blog-delete-button").click(function() {
    var idx, msg, url;
    msg = $(this).data("msg");
    idx = $(this).data("idx");
    url = $("#blog-add-form").attr("action");
    if (confirm(msg)) {
      $.ajax({
        url: url,
        type: "POST",
        data: {
          method: "delete",
          idx: idx
        },
        success: function() {
          return window.location.reload();
        }
      });
    }
    return false;
  });
  $("a.form-submit").click(function() {
    var action, form;
    action = $(this).attr("href");
    form = $(this).closest("form");
    form.attr("action", action);
    console.log(form.attr("method"));
    form.submit();
    return false;
  });
  $("#select-event").change(function() {
    return window.location = $("#select-event option:selected").attr("value");
  });
  map = null;
  layer = null;
  $(".open-location-modal").click(function(e) {
    var accesstoken, lat, lng, title;
    e.preventDefault();
    title = $(this).data("title");
    $("#location-title").text(title);
    accesstoken = $(this).data("accesstoken");
    L.mapbox.accessToken = accesstoken;
    if (!map) {
      map = L.mapbox.map('location-map', 'mapbox.streets');
    }
    lat = $(this).data("lat");
    lng = $(this).data("lng");
    map.setView([lat, lng], 14);
    if (layer) {
      map.removeLayer(layer);
    }
    layer = L.mapbox.featureLayer({
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [lng, lat]
      },
      properties: {
        title: title,
        description: "",
        "marker-symbol": "star",
        "marker-size": "medium",
        "marker-color": "#f44"
      }
    }).addTo(map);
    return $('#location-modal').modal('show');
  });
  $('#location-modal').on('shown.bs.modal', function() {
    return map.invalidateSize();
  });
  event_map = null;
  event_layer = null;
  $(".event-location-map").each(function(index, value) {
    var accesstoken, description, lat, lng, title;
    lat = $(this).data("lat");
    lng = $(this).data("lng");
    title = $(this).data("title");
    description = $(this).data("description");
    accesstoken = $(this).data("accesstoken");
    L.mapbox.accessToken = accesstoken;
    if (!event_map) {
      event_map = L.mapbox.map('event-location-map', 'mapbox.streets');
    }
    event_map.setView([lat, lng], 14);
    if (event_layer) {
      event_map.removeLayer(layer);
    }
    layer = L.mapbox.featureLayer({
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [lng, lat]
      },
      properties: {
        title: title,
        description: description,
        "marker-symbol": "star",
        "marker-size": "medium",
        "marker-color": "#f44"
      }
    }).addTo(event_map);
    return event_map.invalidateSize();
  });
  $('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
    if (e.target.id === "location-button" && event_map) {
      return event_map.invalidateSize();
    }
  });
  $(".share-on-facebook").click(function(e) {
    var popup, url;
    e.preventDefault();
    url = encodeURIComponent($(this).data("url"));
    popup = window.open('//www.facebook.com/sharer.php?u=' + url, 'popupwindow', 'scrollbars=yes,width=800,height=400');
    popup.focus();
    return false;
  });
  return $(".share-on-googleplus").click(function(e) {
    var popup, url;
    e.preventDefault();
    url = encodeURIComponent($(this).data("url"));
    popup = window.open('//plus.google.com/share?url=' + url, 'popupwindow', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
    popup.focus();
    return false;
  });
});

(function() {
  var handleIntent, height, intentRegex, left, m, target, top, width, winHeight, winWidth, windowOptions;
  if (window.__twitterIntentHandler) {
    return;
  }
  intentRegex = /twitter\.com(\:\d{2,4})?\/intent\/(\w+)/;
  windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes';
  width = 550;
  height = 420;
  winHeight = screen.height;
  winWidth = screen.width;
  handleIntent = function(e) {
    var target;
    e = e || window.event;
    return target = e.target || e.srcElement;
  };
  while (target && target.nodeName.toLowerCase() !== 'a') {
    target = target.parentNode;
  }
  if (target && target.nodeName.toLowerCase() === 'a' && target.href) {
    m = target.href.match(intentRegex);
    if (m) {
      left = Math.round((winWidth / 2) - (width / 2));
      top = 0;
      if (winHeight > height) {
        top = Math.round((winHeight / 2) - (height / 2));
      }
      window.open(target.href, 'intent', windowOptions + ',width=' + width + ',height=' + height + ',left=' + left + ',top=' + top);
      e.returnValue = false;
      e.preventDefault && e.preventDefault();
    }
  }
  if (document.addEventListener) {
    document.addEventListener('click', handleIntent, false);
  } else if (document.attachEvent) {
    document.attachEvent('onclick', handleIntent);
  }
  return window.__twitterIntentHandler = true;
})();
